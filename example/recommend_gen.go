// Code generated by "go-gen-lo"; DO NOT EDIT.
// Based on information from https://github.com/snamiki1212/go-gen-lo

package main

import "github.com/samber/lo"

/************************************************
 ** lo basic methods
 ************************************************/

// LoFilter
func (xs Recommends) LoFilter(predicate func(*Recommend, int) bool) Recommends {
	return lo.Filter(xs, predicate)
}

// LoFilterReject
func (xs Recommends) LoFilterReject(predicate func(*Recommend, int) bool) (Recommends, Recommends) {
	return lo.FilterReject(xs, predicate)
}

// LoFind
func (xs Recommends) LoFind(predicate func(*Recommend) bool) (*Recommend, bool) {
	return lo.Find(xs, predicate)
}

// LoContainsBy
func (xs Recommends) LoContainsBy(predicate func(*Recommend) bool) bool {
	return lo.ContainsBy(xs, predicate)
}

// LoEveryBy
func (xs Recommends) LoEveryBy(predicate func(item *Recommend) bool) bool {
	return lo.EveryBy(xs, predicate)
}

// LoSomeBy
func (xs Recommends) LoSomeBy(predicate func(item *Recommend) bool) bool {
	return lo.SomeBy(xs, predicate)
}

// LoToSlicePtr
func (xs Recommends) LoToSlicePtr() []**Recommend {
	return lo.ToSlicePtr(xs)
}

// LoFromSlicePtr
func (xs Recommends) LoFromSlicePtr() []Recommend {
	return lo.FromSlicePtr(xs)
}

/************************************************
 ** lo extended methods
 ************************************************/

// -- Filter ------------------------------------

// LoFilterByID
func (xs Recommends) LoFilterByID(_ID string) Recommends {
	return lo.Filter(xs, func(entity *Recommend, index int) bool {
		return entity.ID == _ID
	})
}

// LoFilterByNum
func (xs Recommends) LoFilterByNum(_Num int32) Recommends {
	return lo.Filter(xs, func(entity *Recommend, index int) bool {
		return entity.Num == _Num
	})
}

// -- KeyBy ------------------------------------

// LoKeyByID
func (xs Recommends) LoKeyByID() map[string]*Recommend {
	return lo.KeyBy(xs, func(entity *Recommend) string {
		return entity.ID
	})
}

// LoKeyByNum
func (xs Recommends) LoKeyByNum() map[int32]*Recommend {
	return lo.KeyBy(xs, func(entity *Recommend) int32 {
		return entity.Num
	})
}

// -- GroupBy ------------------------------------

// LoGroupByID
func (xs Recommends) LoGroupByID() map[string]Recommends {
	return lo.GroupBy(xs, func(entity *Recommend) string {
		return entity.ID
	})
}

// LoGroupByNum
func (xs Recommends) LoGroupByNum() map[int32]Recommends {
	return lo.GroupBy(xs, func(entity *Recommend) int32 {
		return entity.Num
	})
}

// -- UniqBy ------------------------------------

// LoUniqByID
func (xs Recommends) LoUniqByID() Recommends {
	return lo.UniqBy(xs, func(entity *Recommend) string {
		return entity.ID
	})
}

// LoUniqByNum
func (xs Recommends) LoUniqByNum() Recommends {
	return lo.UniqBy(xs, func(entity *Recommend) int32 {
		return entity.Num
	})
}

// -- Find ------------------------------------

// LoFindByID
func (xs Recommends) LoFindByID(_ID string) (*Recommend, bool) {
	return lo.Find(xs, func(entity *Recommend) bool {
		return entity.ID == _ID
	})
}

// LoFindByNum
func (xs Recommends) LoFindByNum(_Num int32) (*Recommend, bool) {
	return lo.Find(xs, func(entity *Recommend) bool {
		return entity.Num == _Num
	})
}

// -- ContainsBy ------------------------------------

// LoContainsByID
func (xs Recommends) LoContainsByID(_ID string) bool {
	return lo.ContainsBy(xs, func(entity *Recommend) bool {
		return entity.ID == _ID
	})
}

// LoContainsByNum
func (xs Recommends) LoContainsByNum(_Num int32) bool {
	return lo.ContainsBy(xs, func(entity *Recommend) bool {
		return entity.Num == _Num
	})
}
