// Code generated by "go-gen-lo"; DO NOT EDIT.
// Based on information from https://github.com/snamiki1212/go-gen-lo

package main

import "github.com/samber/lo"

// Filter
func (xs UserPtrs) Filter(predicate func(*User, int) bool) UserPtrs {
	return lo.Filter(xs, predicate)
}

// Map
func (xs UserPtrs) Map(iteratee func(item *User, index int) *User) UserPtrs {
	return lo.Map(xs, iteratee)
}

// FilterReject
func (xs UserPtrs) FilterReject(predicate func(*User, int) bool) (UserPtrs, UserPtrs) {
	return lo.FilterReject(xs, predicate)
}

// Find
func (xs UserPtrs) Find(predicate func(*User) bool) (*User, bool) {
	return lo.Find(xs, predicate)
}

// FilterByUserID
func (xs UserPtrs) FilterByUserID(_UserID string) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.UserID == _UserID
	})
}

// FilterByInt
func (xs UserPtrs) FilterByInt(_Int int) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.Int == _Int
	})
}

// FilterByIntPtr
func (xs UserPtrs) FilterByIntPtr(_IntPtr *int) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.IntPtr == _IntPtr
	})
}

// FilterByBool
func (xs UserPtrs) FilterByBool(_Bool bool) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.Bool == _Bool
	})
}

// FilterByBoolPtr
func (xs UserPtrs) FilterByBoolPtr(_BoolPtr *bool) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.BoolPtr == _BoolPtr
	})
}

// FilterByStr
func (xs UserPtrs) FilterByStr(_Str string) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.Str == _Str
	})
}

// FilterByStrPtr
func (xs UserPtrs) FilterByStrPtr(_StrPtr *string) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.StrPtr == _StrPtr
	})
}

// FilterByStruct0
func (xs UserPtrs) FilterByStruct0(_Struct0 DefinedStruct0) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.Struct0 == _Struct0
	})
}

// FilterByStructPtr0
func (xs UserPtrs) FilterByStructPtr0(_StructPtr0 *DefinedStruct0) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.StructPtr0 == _StructPtr0
	})
}

// FilterByStruct1
func (xs UserPtrs) FilterByStruct1(_Struct1 DefinedStruct1) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.Struct1 == _Struct1
	})
}

// FilterByStructPtr1
func (xs UserPtrs) FilterByStructPtr1(_StructPtr1 *DefinedStruct1) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.StructPtr1 == _StructPtr1
	})
}

// FilterByChanSend0
func (xs UserPtrs) FilterByChanSend0(_ChanSend0 chan<- int) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.ChanSend0 == _ChanSend0
	})
}

// FilterByChanSendPtr0
func (xs UserPtrs) FilterByChanSendPtr0(_ChanSendPtr0 *chan<- int) UserPtrs {
	return lo.Filter(xs, func(entity *User, index int) bool {
		return entity.ChanSendPtr0 == _ChanSendPtr0
	})
}

// KeyByUserID
func (xs UserPtrs) KeyByUserID() map[string]*User {
	return lo.KeyBy(xs, func(entity *User) string {
		return entity.UserID
	})
}

// KeyByInt
func (xs UserPtrs) KeyByInt() map[int]*User {
	return lo.KeyBy(xs, func(entity *User) int {
		return entity.Int
	})
}

// KeyByIntPtr
func (xs UserPtrs) KeyByIntPtr() map[*int]*User {
	return lo.KeyBy(xs, func(entity *User) *int {
		return entity.IntPtr
	})
}

// KeyByBool
func (xs UserPtrs) KeyByBool() map[bool]*User {
	return lo.KeyBy(xs, func(entity *User) bool {
		return entity.Bool
	})
}

// KeyByBoolPtr
func (xs UserPtrs) KeyByBoolPtr() map[*bool]*User {
	return lo.KeyBy(xs, func(entity *User) *bool {
		return entity.BoolPtr
	})
}

// KeyByStr
func (xs UserPtrs) KeyByStr() map[string]*User {
	return lo.KeyBy(xs, func(entity *User) string {
		return entity.Str
	})
}

// KeyByStrPtr
func (xs UserPtrs) KeyByStrPtr() map[*string]*User {
	return lo.KeyBy(xs, func(entity *User) *string {
		return entity.StrPtr
	})
}

// KeyByStruct0
func (xs UserPtrs) KeyByStruct0() map[DefinedStruct0]*User {
	return lo.KeyBy(xs, func(entity *User) DefinedStruct0 {
		return entity.Struct0
	})
}

// KeyByStructPtr0
func (xs UserPtrs) KeyByStructPtr0() map[*DefinedStruct0]*User {
	return lo.KeyBy(xs, func(entity *User) *DefinedStruct0 {
		return entity.StructPtr0
	})
}

// KeyByStruct1
func (xs UserPtrs) KeyByStruct1() map[DefinedStruct1]*User {
	return lo.KeyBy(xs, func(entity *User) DefinedStruct1 {
		return entity.Struct1
	})
}

// KeyByStructPtr1
func (xs UserPtrs) KeyByStructPtr1() map[*DefinedStruct1]*User {
	return lo.KeyBy(xs, func(entity *User) *DefinedStruct1 {
		return entity.StructPtr1
	})
}

// KeyByChanSend0
func (xs UserPtrs) KeyByChanSend0() map[chan<- int]*User {
	return lo.KeyBy(xs, func(entity *User) chan<- int {
		return entity.ChanSend0
	})
}

// KeyByChanSendPtr0
func (xs UserPtrs) KeyByChanSendPtr0() map[*chan<- int]*User {
	return lo.KeyBy(xs, func(entity *User) *chan<- int {
		return entity.ChanSendPtr0
	})
}

// GroupByUserID
func (xs UserPtrs) GroupByUserID() map[string]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) string {
		return entity.UserID
	})
}

// GroupByInt
func (xs UserPtrs) GroupByInt() map[int]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) int {
		return entity.Int
	})
}

// GroupByIntPtr
func (xs UserPtrs) GroupByIntPtr() map[*int]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) *int {
		return entity.IntPtr
	})
}

// GroupByBool
func (xs UserPtrs) GroupByBool() map[bool]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) bool {
		return entity.Bool
	})
}

// GroupByBoolPtr
func (xs UserPtrs) GroupByBoolPtr() map[*bool]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) *bool {
		return entity.BoolPtr
	})
}

// GroupByStr
func (xs UserPtrs) GroupByStr() map[string]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) string {
		return entity.Str
	})
}

// GroupByStrPtr
func (xs UserPtrs) GroupByStrPtr() map[*string]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) *string {
		return entity.StrPtr
	})
}

// GroupByStruct0
func (xs UserPtrs) GroupByStruct0() map[DefinedStruct0]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) DefinedStruct0 {
		return entity.Struct0
	})
}

// GroupByStructPtr0
func (xs UserPtrs) GroupByStructPtr0() map[*DefinedStruct0]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) *DefinedStruct0 {
		return entity.StructPtr0
	})
}

// GroupByStruct1
func (xs UserPtrs) GroupByStruct1() map[DefinedStruct1]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) DefinedStruct1 {
		return entity.Struct1
	})
}

// GroupByStructPtr1
func (xs UserPtrs) GroupByStructPtr1() map[*DefinedStruct1]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) *DefinedStruct1 {
		return entity.StructPtr1
	})
}

// GroupByChanSend0
func (xs UserPtrs) GroupByChanSend0() map[chan<- int]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) chan<- int {
		return entity.ChanSend0
	})
}

// GroupByChanSendPtr0
func (xs UserPtrs) GroupByChanSendPtr0() map[*chan<- int]UserPtrs {
	return lo.GroupBy(xs, func(entity *User) *chan<- int {
		return entity.ChanSendPtr0
	})
}

// FilterRejectByUserID
func (xs UserPtrs) FilterRejectByUserID(_UserID string) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.UserID == _UserID
	})
}

// FilterRejectByInt
func (xs UserPtrs) FilterRejectByInt(_Int int) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.Int == _Int
	})
}

// FilterRejectByIntPtr
func (xs UserPtrs) FilterRejectByIntPtr(_IntPtr *int) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.IntPtr == _IntPtr
	})
}

// FilterRejectByBool
func (xs UserPtrs) FilterRejectByBool(_Bool bool) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.Bool == _Bool
	})
}

// FilterRejectByBoolPtr
func (xs UserPtrs) FilterRejectByBoolPtr(_BoolPtr *bool) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.BoolPtr == _BoolPtr
	})
}

// FilterRejectByStr
func (xs UserPtrs) FilterRejectByStr(_Str string) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.Str == _Str
	})
}

// FilterRejectByStrPtr
func (xs UserPtrs) FilterRejectByStrPtr(_StrPtr *string) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.StrPtr == _StrPtr
	})
}

// FilterRejectByStruct0
func (xs UserPtrs) FilterRejectByStruct0(_Struct0 DefinedStruct0) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.Struct0 == _Struct0
	})
}

// FilterRejectByStructPtr0
func (xs UserPtrs) FilterRejectByStructPtr0(_StructPtr0 *DefinedStruct0) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.StructPtr0 == _StructPtr0
	})
}

// FilterRejectByStruct1
func (xs UserPtrs) FilterRejectByStruct1(_Struct1 DefinedStruct1) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.Struct1 == _Struct1
	})
}

// FilterRejectByStructPtr1
func (xs UserPtrs) FilterRejectByStructPtr1(_StructPtr1 *DefinedStruct1) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.StructPtr1 == _StructPtr1
	})
}

// FilterRejectByChanSend0
func (xs UserPtrs) FilterRejectByChanSend0(_ChanSend0 chan<- int) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.ChanSend0 == _ChanSend0
	})
}

// FilterRejectByChanSendPtr0
func (xs UserPtrs) FilterRejectByChanSendPtr0(_ChanSendPtr0 *chan<- int) (kept UserPtrs, rejected UserPtrs) {
	return lo.FilterReject(xs, func(entity *User, index int) bool {
		return entity.ChanSendPtr0 == _ChanSendPtr0
	})
}

// FindByUserID
func (xs UserPtrs) FindByUserID(_UserID string) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.UserID == _UserID
	})
}

// FindByInt
func (xs UserPtrs) FindByInt(_Int int) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.Int == _Int
	})
}

// FindByIntPtr
func (xs UserPtrs) FindByIntPtr(_IntPtr *int) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.IntPtr == _IntPtr
	})
}

// FindByBool
func (xs UserPtrs) FindByBool(_Bool bool) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.Bool == _Bool
	})
}

// FindByBoolPtr
func (xs UserPtrs) FindByBoolPtr(_BoolPtr *bool) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.BoolPtr == _BoolPtr
	})
}

// FindByStr
func (xs UserPtrs) FindByStr(_Str string) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.Str == _Str
	})
}

// FindByStrPtr
func (xs UserPtrs) FindByStrPtr(_StrPtr *string) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.StrPtr == _StrPtr
	})
}

// FindByStruct0
func (xs UserPtrs) FindByStruct0(_Struct0 DefinedStruct0) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.Struct0 == _Struct0
	})
}

// FindByStructPtr0
func (xs UserPtrs) FindByStructPtr0(_StructPtr0 *DefinedStruct0) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.StructPtr0 == _StructPtr0
	})
}

// FindByStruct1
func (xs UserPtrs) FindByStruct1(_Struct1 DefinedStruct1) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.Struct1 == _Struct1
	})
}

// FindByStructPtr1
func (xs UserPtrs) FindByStructPtr1(_StructPtr1 *DefinedStruct1) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.StructPtr1 == _StructPtr1
	})
}

// FindByChanSend0
func (xs UserPtrs) FindByChanSend0(_ChanSend0 chan<- int) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.ChanSend0 == _ChanSend0
	})
}

// FindByChanSendPtr0
func (xs UserPtrs) FindByChanSendPtr0(_ChanSendPtr0 *chan<- int) (*User, bool) {
	return lo.Find(xs, func(entity *User) bool {
		return entity.ChanSendPtr0 == _ChanSendPtr0
	})
}
