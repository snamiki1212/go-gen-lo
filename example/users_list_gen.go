// Code generated by "go-gen-lo"; DO NOT EDIT.
// Based on information from https://github.com/snamiki1212/go-gen-lo

package main

import "github.com/samber/lo"

// Filter
func (xs UserList) Filter(predicate func(item User, index int) bool) UserList {
	return lo.Filter(xs, predicate)
}

// Map
func (xs UserList) Map(iteratee func(item User, index int) User) UserList {
	return lo.Map(xs, iteratee)
}

// FilterUserID
func (xs UserList) FilterUserID(field string) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.UserID == field
	})
}

// FilterInt
func (xs UserList) FilterInt(field int) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.Int == field
	})
}

// FilterIntPtr
func (xs UserList) FilterIntPtr(field *int) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.IntPtr == field
	})
}

// FilterBool
func (xs UserList) FilterBool(field bool) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.Bool == field
	})
}

// FilterBoolPtr
func (xs UserList) FilterBoolPtr(field *bool) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.BoolPtr == field
	})
}

// FilterStr
func (xs UserList) FilterStr(field string) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.Str == field
	})
}

// FilterStrPtr
func (xs UserList) FilterStrPtr(field *string) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.StrPtr == field
	})
}

// FilterStruct0
func (xs UserList) FilterStruct0(field DefinedStruct0) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.Struct0 == field
	})
}

// FilterStructPtr0
func (xs UserList) FilterStructPtr0(field *DefinedStruct0) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.StructPtr0 == field
	})
}

// FilterStruct1
func (xs UserList) FilterStruct1(field DefinedStruct1) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.Struct1 == field
	})
}

// FilterStructPtr1
func (xs UserList) FilterStructPtr1(field *DefinedStruct1) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.StructPtr1 == field
	})
}

// FilterChanSend0
func (xs UserList) FilterChanSend0(field chan<- int) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.ChanSend0 == field
	})
}

// FilterChanSendPtr0
func (xs UserList) FilterChanSendPtr0(field *chan<- int) UserList {
	return lo.Filter(xs, func(entity User, index int) bool {
		return entity.ChanSendPtr0 == field
	})
}

// KeyByUserID
func (xs UserList) KeyByUserID() map[string]User {
	return lo.KeyBy(xs, func(entity User) string {
		return entity.UserID
	})
}

// KeyByInt
func (xs UserList) KeyByInt() map[int]User {
	return lo.KeyBy(xs, func(entity User) int {
		return entity.Int
	})
}

// KeyByIntPtr
func (xs UserList) KeyByIntPtr() map[*int]User {
	return lo.KeyBy(xs, func(entity User) *int {
		return entity.IntPtr
	})
}

// KeyByBool
func (xs UserList) KeyByBool() map[bool]User {
	return lo.KeyBy(xs, func(entity User) bool {
		return entity.Bool
	})
}

// KeyByBoolPtr
func (xs UserList) KeyByBoolPtr() map[*bool]User {
	return lo.KeyBy(xs, func(entity User) *bool {
		return entity.BoolPtr
	})
}

// KeyByStr
func (xs UserList) KeyByStr() map[string]User {
	return lo.KeyBy(xs, func(entity User) string {
		return entity.Str
	})
}

// KeyByStrPtr
func (xs UserList) KeyByStrPtr() map[*string]User {
	return lo.KeyBy(xs, func(entity User) *string {
		return entity.StrPtr
	})
}

// KeyByStruct0
func (xs UserList) KeyByStruct0() map[DefinedStruct0]User {
	return lo.KeyBy(xs, func(entity User) DefinedStruct0 {
		return entity.Struct0
	})
}

// KeyByStructPtr0
func (xs UserList) KeyByStructPtr0() map[*DefinedStruct0]User {
	return lo.KeyBy(xs, func(entity User) *DefinedStruct0 {
		return entity.StructPtr0
	})
}

// KeyByStruct1
func (xs UserList) KeyByStruct1() map[DefinedStruct1]User {
	return lo.KeyBy(xs, func(entity User) DefinedStruct1 {
		return entity.Struct1
	})
}

// KeyByStructPtr1
func (xs UserList) KeyByStructPtr1() map[*DefinedStruct1]User {
	return lo.KeyBy(xs, func(entity User) *DefinedStruct1 {
		return entity.StructPtr1
	})
}

// KeyByChanSend0
func (xs UserList) KeyByChanSend0() map[chan<- int]User {
	return lo.KeyBy(xs, func(entity User) chan<- int {
		return entity.ChanSend0
	})
}

// KeyByChanSendPtr0
func (xs UserList) KeyByChanSendPtr0() map[*chan<- int]User {
	return lo.KeyBy(xs, func(entity User) *chan<- int {
		return entity.ChanSendPtr0
	})
}
