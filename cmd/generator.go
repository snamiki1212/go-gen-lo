package cmd

import (
	"bytes"
	"fmt"
	"text/template"

	"github.com/snamiki1212/go-gen-lo/internal/parser"
)

const templateBody = `
// {{ .Method }}
func (xs {{ .Slice }}) {{ .Method }}() []{{ .Type }} {
	sli := make([]{{ .Type }}, 0, len(xs))
	for i := range xs {
		sli = append(sli, xs[i].{{ .Field }})
	}
	return sli
}
`

// Replace variable from key to value in template.
type templateMapper struct {
	Slice  string // Slice name for target struct (ex. Users).
	Method string // Method name of accessor (ex. UserIDs).
	Type   string // Type name of field (ex. string).
	Field  string // Field name of struct (ex. UserID).
}

// Generate code
func generate(data parser.Data) (string, error) {
	pkgName := data.PkgName
	sliceName := data.SliceName
	infos := data.Fields

	if len(infos) == 0 {
		return "", nil
	}

	var txt string

	// append header
	txt += "// Code generated by go generate DO NOT EDIT.\n\n"
	txt += "package " + pkgName + "\n"

	// append templates
	var doc bytes.Buffer
	tp, err := template.New("").Parse(templateBody)
	if err != nil {
		return "", fmt.Errorf("template parse error: %w", err)
	}
	for _, info := range infos {
		data := &templateMapper{
			Slice:  sliceName,
			Method: info.Accessor,
			Type:   info.Type,
			Field:  info.Name,
		}

		err = tp.Execute(&doc, data)
		if err != nil {
			return "", fmt.Errorf("template execute error: %w", err)
		}
	}
	txt += doc.String()

	return txt, nil
}
