package generator

import (
	"bytes"
	"fmt"
	"text/template"

	"github.com/snamiki1212/go-gen-lo/internal"
)

func NewGenerator() Generator {
	return Generator{
		LoList: []Lo{
			NewLoFilter(),
			NewLoMap(),
			NewLoKeyBy(),
		},
	}
}

type Generator struct {
	LoList []Lo
}

type Lo interface {
	Kind() string
	StdTemplate() (string, bool)
	ExtendTemplate() (string, bool)
}

// Generate code
func (g Generator) Generate(args internal.Arguments, data internal.Data) (string, error) {
	pkgName := data.PackageName
	sliceName := data.SliceName
	fields := data.Fields

	var txt string

	// append header
	txt += genHeader(pkgName)

	// append lo
	lo, err := g.genStd(args, sliceName)
	if err != nil {
		return "", fmt.Errorf("generate lo error: %w", err)
	}
	txt += lo

	// append extend
	lo, err = g.genExtend(args, sliceName, fields)
	if err != nil {
		return "", fmt.Errorf("generate lo extend error: %w", err)
	}
	txt += lo

	return txt, nil
}

func genHeader(pkgName string) string {
	var txt string
	txt += "// Code generated by \"go-gen-lo\"; DO NOT EDIT.\n"
	txt += "// Based on information from https://github.com/snamiki1212/go-gen-lo\n"
	txt += "\n"
	txt += fmt.Sprintf("package %s\n\n", pkgName)
	txt += `import "github.com/samber/lo"` + "\n"
	return txt
}

func (g Generator) genStd(args internal.Arguments, sliceName string) (string, error) {
	// append loMethodTemplates
	var doc bytes.Buffer

	for _, elem := range g.LoList {
		rawTemp, ok := elem.StdTemplate()
		if !ok {
			continue
		}

		// New Template
		tp, err := template.New("").Parse(rawTemp)
		if err != nil {
			return "", fmt.Errorf("template parse error: %w", err)
		}

		// Generate code block from template
		data := &loMethodTemplateMapper{Slice: sliceName, Entity: args.DisplayEntity()}
		if err = tp.Execute(&doc, data); err != nil {
			return "", fmt.Errorf("template execute error: %w", err)
		}
	}

	return doc.String(), nil
}

func (g Generator) genExtend(args internal.Arguments, sliceName string, fields internal.Fields) (string, error) {
	if len(fields) == 0 {
		return "", nil
	}
	var doc bytes.Buffer

	for _, elem := range g.LoList {
		// Get template src
		rawTemp, ok := elem.ExtendTemplate()
		if !ok {
			continue
		}

		// New Template
		tp, err := template.New("").Parse(rawTemp)
		if err != nil {
			return "", fmt.Errorf("template parse error: %w", err)
		}

		// Generate txt from template
		for _, field := range fields {
			data := &loMethodExtendTemplateMapper{Slice: sliceName, Entity: args.DisplayEntity(), Type: field.Type, Field: field.Name}
			err = tp.Execute(&doc, data)
			if err != nil {
				return "", fmt.Errorf("template execute error: %w", err)
			}
		}
	}

	return doc.String(), nil
}
